# Step 1: Import necessary libraries
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

# Step 2: Load the dataset
dataset = pd.read_csv('/content/Churn_Modelling (2).csv')

# Step 3: Data preprocessing
# Handling Missing Values: Imputation
# Exclude non-numeric columns from imputation
numeric_columns = dataset.select_dtypes(include=['number']).columns
numeric_columns = numeric_columns.drop('Exited')  # Exclude 'Exited' column
dataset[numeric_columns] = dataset[numeric_columns].fillna(dataset[numeric_columns].mean())

# Separate features and target variable
X = dataset.drop('Exited', axis=1)  # Features
y = dataset['Exited']  # Target variable

# Step 4: Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Step 5: Preprocess categorical variables and scale numerical variables
numeric_transformer = StandardScaler()
categorical_transformer = OneHotEncoder(handle_unknown='ignore')

preprocessor = ColumnTransformer(
    transformers=[
        ('num', numeric_transformer, numeric_columns),
        ('cat', categorical_transformer, ['Geography', 'Gender'])  # Assuming 'Geography' and 'Gender' are categorical
    ])

# Step 6: Build the logistic regression model
model = Pipeline(steps=[('preprocessor', preprocessor),
                        ('classifier', LogisticRegression())])

# Step 7: Train the model
model.fit(X_train, y_train)

# Step 8: Make predictions on the testing set
y_pred = model.predict(X_test)

# Step 9: Evaluate the model
# Calculate accuracy
accuracy = accuracy_score(y_test, y_pred)

# Generate confusion matrix
conf_matrix = confusion_matrix(y_test, y_pred)

# Generate classification report
class_report = classification_report(y_test, y_pred)

# Print the evaluation metrics
print("Accuracy:", accuracy)
print("Confusion Matrix:")
print(conf_matrix)
print("Classification Report:")
print(class_report)
